#include<stdio.h>
#include<string.h>
#include <windows.h>
#include<ctype.h>
#include<time.h>
#include<string.h>
#include<conio.h>

 //ARROW KEYS--özel tuşlar...
#define LEFT 75
#define RIGHT 77
#define UP 72
#define DOWN 80

# define INSERT1 120 // X
# define INSERT2 121 // Y
# define YARDIM 63 //?

# define KAYDET 43 //+

# define FKAYDET 45 //-

# define CIKIS1 46 // .
# define CIKIS2 34 // "

# define BACKSPACE 8 

# define BILGI 61 // =

typedef struct kisi
{
        int kelime;
        struct kisi *sonra;
        /*Bu pointera sürekli bir sonraki structı gösterecek olan adres atanacak.
          Bu sayede her struct kendinden sonraki structun bellekte
        nerede olduğunu bilecek*/
        struct kisi *once;
        /*Bu pointera sürekli bir onceki structı gösterecek olan adres atanacak.
          Bu sayede her struct kendinden onceki structun bellekte
        nerede olduğunu bilecek*/
}b;
struct kisi *yeni , *ilk , *son;/*struct kisi tipinde yeni , ilk ve son isminde tanımlamalar yaptık.*/
int a=0;
int y=0;
 int x=0;
 //FONKSİYONLAR
 static int get_code(void);
 void git(int x, int y); // imleç hareketi için.
 void yon();
 void yardim();
 enum
{
    KEY_ESC     = 27,
    ARROW_UP    = 256 + 72,
    ARROW_DOWN  = 256 + 80,
    ARROW_LEFT  = 256 + 75,
    ARROW_RIGHT = 256 + 77
};


int main(){
   system("color 70");//Renk:beyaz
      system ("title Metin Editörü");//Başlık
  selam:
  int adet=0;
   
   yeni=NULL;
    ilk=NULL;
    son=NULL;
     git(1,1);
     
 if(ilk==NULL)/*Dugumde eleman var mı?*/
     {
       /*Dugumde eleman yoksa ilk=NULL olacaktır.*/
        struct kisi *yeni = ((kisi *) malloc(sizeof(kisi)));
        git(1,18);
		printf("______________________________________________________________________\n");
		printf("/Yardim almak icin ? ni giriniz.../");
		git(0,0);
		struct kisi *ara;
   /*struct kisi tipinde ara isminde bir tip tanımladık*/

        /*struct kisi tipinde yeni tanımladık ve bellekten structın boyutu kadar yer aldık*/
        printf("\nMetin Alani:");
        do{
        x++;
        git(x+12,1);
		yeni->kelime=getch();
        yeni->sonra=NULL;
        /*Yeni alınan bilgilerden sonra hiç bi eleman olmadığı için NULL yapıldı*/
   
      
        ilk=yeni;
        son=yeni;
      
        /*Dügüm için alınan ilk eleman olduğundan yeni ve son ilke eşitlendi*/
        char kelime=(char)kelime;
        while (( yeni->kelime = get_code()) != KEY_ESC )
    {  
        if(yeni->kelime==ARROW_UP)
         {if(y!=1)
         {
         y--;
            git(x,y);
            }
        } 
                else if (yeni->kelime==ARROW_DOWN)
         {
                 y++;
                 git(x,y);
         }
            
        else if(yeni->kelime==ARROW_LEFT)
            {
            if(x!=1){
            
                        x--;
            git(x,y);
          }
			    }
        else if (yeni->kelime==ARROW_RIGHT)
             {
             x++;
            git(x,y);
                }
        }
    
    getchar();   // wait
        printf("%c",yeni->kelime);
        a++;
        yon();
      
       if(yeni->kelime==BILGI){
git(3,22);
printf("%d karakterlidir.",x-1);
}
        	if(yeni->kelime == YARDIM){
	system("cls");
	git(1,1);
	 printf("**** YARDİM KUTUSU ? ****");
	 git(2,3);
	 printf("1) Silmek icin backspace i ,");
	 git(2,5);
	  printf("2) insert icin x ve y tusuna birlikte ,");
	  git(2,7);
	  printf("3) Kaydetmek icin + ,Farkli kaydetmek icin - yi ,");
	   git(2,9);
	   printf("4) İmlecin bulundugu satirin sayisini , toplam satir sayisini ve toplam karakt\ter sayisini ekrana yazmak icin '=' i,");
	 git(2,13);
     printf("Menude hareket icin;");
     git(6,15);
     putchar(24);
     git(6,17);
     putchar(25);
     git(7,16);
     putchar(26);
     git(5,16);
     putchar(27);
     git(10,15);
     printf("Yon Tuslarini");
     git(11,17);
     printf("kullaniniz.");
     git(2,19);
     printf("Cikis icin;");
     git(4,21);
     printf("'.' ve tirnak isaretine birlikte basin.\n\n ");
     printf("Tekrar metin editorune geri donmek icin herhangi bir tusa basin.");
     getch();
     system("cls");
     git(1,1);
     goto selam;

}


        
         if(yeni->kelime==CIKIS1){
 
   int tus2=getch();
   if(tus2==CIKIS2)
  return 0;
  
}
    }while(yeni->kelime!=UP&&yeni->kelime!=LEFT);
     }
     else
     {
        struct kisi *yeni = ((kisi *) malloc(sizeof(kisi)));
        /*struct kisi tipinde yeni tanımladık ve bellekten structın boyutu kadar yer aldık*/
        printf("\nMetin Alanı:");
        do{
        x++;
        git(x+12,1);
		yeni->kelime=getch();
        yeni->sonra=NULL;  
        /*Yeni alınan bilgilerden sonra hiç bi eleman olmadığı için NULL yapıldı*/
        son->sonra=yeni;
        /*Bi önceki structun sonra adindaki göstericisi yeniye eşitlendi*/
        yeni->once=son;/*Tek yönlü bağlı liste oluşturmadan tek farkı*/
        /*Su an oluşturulmuş olan structun once adindaki gostericisi bir onceki structa eşitlendi*/
        son=yeni; 
        /*Son adındaki struct artık yeni structı oldu.
        Bunun yapılmasındaki amac 
        yeni bir dugum ekleneceginde en son hangi structın eklendigini bilmek
        en son eklenen structun sonrasını yeni structına esitlemek 
        yeni oluşturulan structun once adındaki gostericisini sona eşitlemek.*/
        char kelime=(char)kelime;
        a++;
        printf("%c",yeni->kelime);
       
  
  

        
    }while(yeni->kelime!=UP&&yeni->kelime!=LEFT);
     }
     


	getch();
}
 void git(int x, int y) //imlece hareket veriyor ok tuşu için...
{
    COORD coord;
    coord.X = x;
    coord.Y = y;
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
}
void yon()
{


}

void yardim(){
	
	if(yeni->kelime == YARDIM){
	system("cls");
	 git(2,13);
     printf("Menude hareket icin;");
     git(6,15);
     putchar(24);
     git(6,17);
     putchar(25);
     git(7,16);
     putchar(26);
     git(5,16);
     putchar(27);
     git(10,15);
     printf("Yon Tuslarini");
     git(11,17);
     printf("kullaniniz.");
     git(2,19);
     printf("Ana menuye donus icin;");
     git(4,21);
     printf("\"ESC\" kullaniniz.");
}
	}
	static int get_code(void)
{
    int ch;
        ch = getch();

    if (ch == 0 || ch == 224)
        ch = 256 + getch();

    return ch;
}
